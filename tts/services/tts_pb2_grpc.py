# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tts_pb2 as tts__pb2


class TtsStub(object):
    """*
    This is the TTS service for conversational-AI chatbot project.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TextToSpeech = channel.unary_unary(
                '/tts.Tts/TextToSpeech',
                request_serializer=tts__pb2.TextToSpeechRequest.SerializeToString,
                response_deserializer=tts__pb2.TextToSpeechReply.FromString,
                )
        self.EnableCaching = channel.unary_unary(
                '/tts.Tts/EnableCaching',
                request_serializer=tts__pb2.CachingRequest.SerializeToString,
                response_deserializer=tts__pb2.CachingResponse.FromString,
                )
        self.ClearCache = channel.unary_unary(
                '/tts.Tts/ClearCache',
                request_serializer=tts__pb2.CachingRequest.SerializeToString,
                response_deserializer=tts__pb2.CachingResponse.FromString,
                )


class TtsServicer(object):
    """*
    This is the TTS service for conversational-AI chatbot project.
    """

    def TextToSpeech(self, request, context):
        """This takes string as input and returns output as audio(.wav)  file. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableCaching(self, request, context):
        """This takes bool as input to toggle caching in the server and returns ack
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """rpc call to clear the cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TtsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TextToSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.TextToSpeech,
                    request_deserializer=tts__pb2.TextToSpeechRequest.FromString,
                    response_serializer=tts__pb2.TextToSpeechReply.SerializeToString,
            ),
            'EnableCaching': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableCaching,
                    request_deserializer=tts__pb2.CachingRequest.FromString,
                    response_serializer=tts__pb2.CachingResponse.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=tts__pb2.CachingRequest.FromString,
                    response_serializer=tts__pb2.CachingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tts.Tts', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tts(object):
    """*
    This is the TTS service for conversational-AI chatbot project.
    """

    @staticmethod
    def TextToSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tts.Tts/TextToSpeech',
            tts__pb2.TextToSpeechRequest.SerializeToString,
            tts__pb2.TextToSpeechReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableCaching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tts.Tts/EnableCaching',
            tts__pb2.CachingRequest.SerializeToString,
            tts__pb2.CachingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tts.Tts/ClearCache',
            tts__pb2.CachingRequest.SerializeToString,
            tts__pb2.CachingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
